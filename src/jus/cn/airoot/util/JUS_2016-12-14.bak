package util

import (
	"encoding/base64"
	"io/ioutil"
	. "jus"
	. "jus/str"
	. "jus/tool"
	"os"
	"path/filepath"
	"strings"
)

//-------------------------------HTMLObject-------------------------------------
type HTMLObject struct {
	Name           string
	HTMLObjectType int
}

//----------------------------------JUS-----------------------------------------
type JUS struct {
	htmlPath            string //html模块的绝对路径
	jsPath              string //js模块的绝对路径
	SYSTEM_PATH         string //系统路径
	CLASS_PATH          string
	root                string
	parent              *JUS
	domain              string
	className           string
	innerContent        string
	paramValue          string
	html                *HTML
	extendsScriptBuffer string
	scriptBuffer        string
	styleBuffer         string
	pkgMap              map[string]string
	idMap               map[string]*HTMLObject
	staticScript        map[string][]*Attr
	staticCode          map[string][]*Attr
	extendFlag          bool
	css                 *CSS
	cssTag              map[string]string
	scriptFile          bool //判断是否为独立JavaScript文件
}

/**
 * @param root			编译工程目录
 * @param domain		文件作用域
 * @param value			传递的实际参数
 * @param file			读取文件路径
 * @throws IOException
 */
func (j *JUS) CreateFrom(root string, domain string, value string, className string) {
	j.pkgMap = make(map[string]string)
	j.idMap = make(map[string]*HTMLObject)
	j.root = root

	file := strings.Replace(className, ".", "/", -1)

	if root == "" {
		j.htmlPath = file + ".html"
		j.jsPath = file + ".js"
	} else {
		if file[0] == '$' {
			j.htmlPath = j.CLASS_PATH + "/" + file[1:] + ".html"
			j.jsPath = j.CLASS_PATH + "/" + file[1:] + ".js"
		} else {
			j.htmlPath = root + "/" + file + ".html"
			j.jsPath = root + "/" + file + ".js"

			if !Exist(j.htmlPath) {
				if !Exist(j.jsPath) {
					j.htmlPath = j.CLASS_PATH + "/" + file + ".html"
					j.jsPath = j.CLASS_PATH + "/" + file + ".js"
				}
			}
			//fmt.Println(j.htmlPath, j.jsPath)
		}

	}

	if Exist(j.htmlPath) {
		j.html = &HTML{}
		t := GetCode(j.htmlPath)
		//fmt.Println(t)
		j.html.ReadFromString(j.scanMedia(t))

	} else if Exist(j.jsPath) {
		j.scriptFile = true
	}

	if domain == "" {
		j.domain = "\b"
	} else {
		j.domain = domain
	}

	j.className = className
	j.innerContent = value

}

/**
 *
 * @param root
 * @param domain
 * @param value
 * @param className
 * @param parent
 * @throws IOException
 */
func (j *JUS) CreateFromParent(root string, domain string, value string, className string, parent *JUS) {
	j.CreateFrom(root, domain, value, className)
	j.parent = parent
}

func (j *JUS) SetValue(value string) *JUS {
	j.paramValue = value
	return j
}

func (j *JUS) GetDomain() string {
	return j.domain
}

func (j *JUS) GetStaticMap() map[string][]*Attr {
	if j.parent != nil {
		return j.parent.GetStaticMap()
	}

	if j.staticScript == nil {
		j.staticScript = make(map[string][]*Attr)
	}
	return j.staticScript
}

func (j *JUS) GetStaticCodeMap() map[string][]*Attr {
	if j.parent != nil {
		return j.parent.GetStaticCodeMap()
	}
	if j.staticCode == nil {
		j.staticCode = make(map[string][]*Attr)
	}
	return j.staticCode
}

/**
 * 添加静态函数表达式
 * @param className
 * @param func
 */
func (j *JUS) AddStaticScript(className string, funcName string, value string) {
	j.staticScript = j.GetStaticMap()
	fun := j.staticScript[className]
	if fun == nil {
		fun = make([]*Attr, 0)
	}
	attr := &Attr{Name: funcName, Value: value}
	for _, a := range fun {
		if a.Name == funcName {
			return
		}
	}
	fun = append(fun, attr)
	j.staticScript[className] = fun
}

/**
 * 添加静态函数表达式
 * @param className
 * @param func
 */
func (j *JUS) AddStaticfCode(className string, funcName string, value string) {
	j.staticCode = j.GetStaticCodeMap()
	fun := j.staticCode[className]
	if fun == nil {
		fun = make([]*Attr, 0)
	}
	attr := &Attr{Name: funcName, Value: value}
	for _, a := range fun {
		if a.Name == funcName {
			return
		}
	}
	fun = append(fun, attr)
	j.staticCode[className] = fun
}

func (j *JUS) overHTML(value string) {
	child := &HTML{}
	child.ReadFromString(value)
	overList := child.Filter("@override")
	var lst []*HTML = nil
	var l *HTML = nil
	var t *HTML = nil
	var p *HTML = nil

	//Override
	if len(overList) != 0 {
		for k := 0; k < len(overList); k++ {
			lst = overList[k].Child()
			for i := 0; i < len(lst); i++ {
				p = lst[i]
				if "script" == p.TagName() {
					j.extendsScriptBuffer += ListToHTMLString(p.Child())
					continue
				}
				t = j.html.GetElementById(p.GetAttr("id"))
				if t != nil {
					t.ReplaceWithFormString(p.ToString())
				}
			}
		}
	}

	child.RemoveChildByTagName("@override")

	//Vlaue
	overList = child.Filter("value")
	j.innerContent = ""
	if len(overList) != 0 {
		for k := 0; k < len(overList); k++ {
			l = overList[k]

			j.innerContent = ListToHTMLString(j.clearMark(l.Child()))
		}
	}

	child.RemoveChildByTagName("value")
	pList := j.html.GetElementsByTagName("@content")
	if len(pList) > 0 {
		for _, h := range pList {
			if child.IsEmpty() { //文字
				h.ReplaceWithFormList(h.Child())
			} else {
				h.ReplaceWithFormString(child.ToString())
			}
		}
	}

	pList = j.html.GetElementsByTagName("@value")
	if len(pList) > 0 {
		if j.innerContent == "" {
			j.innerContent = ListToHTMLString(j.clearMark([]*HTML{child}))
		}

		for _, h := range pList {
			h.Remove()
		}
	}

} //overHTML

func (j *JUS) clearMark(child []*HTML) []*HTML {
	var p *HTML = nil
	for i := 0; i < len(child); i++ {
		p = child[i]
		p.RemoveAttr("domain")
		p.RemoveAttr("____format____")
		j.clearMark(p.Child())
	}
	return child
}

func (j *JUS) scanHTML(child []*HTML) {

	tagName := ""
	arr := make([]string, 0)
	for _, p := range child {
		tagName = p.TagName()
		if "module" == p.TagName() {
			tagName = "core.module"
		}

		if p.GetAttr("isroot") != "" {
			p.SetAttr("id", j.domain)
		} else {
			if p.GetAttr("id") == "" {
				p.SetAttr("id", p.GetAttr("domain")+getName())
			} else {

				if p.GetAttr("id")[0] == '$' {
					p.SetAttr("src_id", p.GetAttr("id")[1:])
					p.SetAttr("id", p.GetAttr("domain")+p.GetAttr("id")[1:])
				} else {
					p.SetAttr("src_id", p.GetAttr("id"))
					p.SetAttr("id", p.GetAttr("domain")+p.GetAttr("id"))
				}
			}
		}

		if Index(tagName, ".") != -1 {
			arr = strings.Split(tagName, ":")
			if len(arr) > 1 {
				tagName = arr[1]
			}
			tValue := ""
			if p.GetAttr("value") != "" {
				tValue = "<value>" + p.GetAttr("value") + "</value>"
			}
			tValue += ListToHTMLString(p.Child())

			var tFunc *JUS = &JUS{SYSTEM_PATH: j.SYSTEM_PATH, CLASS_PATH: j.CLASS_PATH}
			tFunc.CreateFromParent(j.root, p.GetAttr("id"), tValue, tagName, j)
			tFunc.SetValue(j.innerContent).setExtend(p.GetAttr("id") == j.domain)
			tHTML := tFunc.ReadHTML()

			tHTML.CopyFrom(p)
			tHTML.SetAttr("class_id", tagName)
			if len(arr) > 1 {
				tHTML.SetTagName(arr[0])
			}
			if p == j.html {
				j.html = tHTML
			} else {
				p.ReplaceWith(tHTML)
			}

			continue
		}
		j.scanHTML(p.Child())
	}
}

/**
 * 设置扩展
 * @param flag
 * @return
 */
func (j *JUS) setExtend(flag bool) *JUS {
	j.extendFlag = flag
	return j
}

/**
 * 对所有控件的ID进行记录
 * @param html
 */
func (j *JUS) componentId(child []*HTML) {
	for _, p := range child {
		if p.GetAttr("domain") != "" && p.GetAttr("domain") == j.domain {
			if p.GetAttr("class_id") != "" {
				j.idMap[p.GetAttr("src_id")] = &HTMLObject{Name: p.GetAttr("id"), HTMLObjectType: 1}
			} else {
				j.idMap[p.GetAttr("src_id")] = &HTMLObject{Name: p.GetAttr("id"), HTMLObjectType: 0}
			}
		}

		j.componentId(p.Child())
	}

}

func (j *JUS) cssComponent(child []*HTML) {
	var tagName string
	c := 0
	for _, p := range child {
		if p.GetAttr("domain") != "" && p.GetAttr("domain") == j.domain {
			tagName = p.GetAttr("class_id")
			if tagName != "" {
				c = LastIndex(tagName, ".")
				if c != -1 {
					tagName = Substring(tagName, c+1, len(tagName))
				}
				tmp := ""
				if j.cssTag[strings.ToLower(tagName)] != "" {
					tmp = " " + j.cssTag[strings.ToLower(tagName)]
				}

				p.SetAttr("class", p.GetAttr("class")+tmp)

			}
		}

		j.cssComponent(p.Child())
	}

}

func (j *JUS) styleFormat(style string) string {
	j.css.AddDomain("#" + j.domain)
	j.css.ReplaceSelecter("body", "."+j.domain)
	j.cssTag = j.css.GetComponentClass()
	j.cssComponent([]*HTML{j.html})
	return ScriptInitD(j.css.ToString(), j.domain)

}

func (j *JUS) importHTML() {
	sets := j.html.GetElementsByTagName("@import")
	p := 0
	value := ""
	path := ""
	fileName := ""

	for i := 0; i < len(sets); i++ {
		value = sets[i].GetAttr("value")
		value = strings.Replace(value, ";", "", -1)
		value = strings.Replace(value, " ", "", -1)
		p = LastIndex(value, ".")
		path = Substring(value, 0, p)
		if CharAt(value, p+1) != "*" {
			fileName = Substring(value, p+1, -1) + ".html"
		}

		fl := j.CLASS_PATH + "/" + strings.Replace(path, ".", "/", -1)
		lst, err := ioutil.ReadDir(fl)
		if err == nil {
			for _, f := range lst {
				if !f.IsDir() && (fileName == "" || fileName == f.Name()) {
					j.pkgMap[strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), ".")))] = path + "." + Substring(f.Name(), 0, LastIndex(f.Name(), "."))
					//fmt.Println(strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), "."))), path+"."+Substring(f.Name(), 0, LastIndex(f.Name(), ".")))
				}
			}
		}
		fl = j.root + "/" + strings.Replace(path, ".", "/", -1)
		lst, err = ioutil.ReadDir(fl)
		if err == nil {
			for _, f := range lst {
				if !f.IsDir() && (fileName == "" || fileName == f.Name()) {
					j.pkgMap[strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), ".")))] = path + "." + Substring(f.Name(), 0, LastIndex(f.Name(), "."))
					//fmt.Println(strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), "."))), path+"."+Substring(f.Name(), 0, LastIndex(f.Name(), ".")))
				}
			}
		}

		fileName = ""

	}
	j.html.RemoveChildByTagName("@import")

}

/**
 * 获取注释信息
 */
func (j *JUS) noteHTML() {
	child := j.html.Filter("!")
	for _, v := range child {
		v.Remove()
	}
}

/**
 *
 */
func (j *JUS) packageHTML(child []*HTML) {
	tagName := ""
	extName := ""
	var arr []string
	for _, p := range child {
		tagName = strings.ToLower(p.TagName())
		arr = strings.Split(tagName, ":")
		if len(arr) > 1 {
			tagName = arr[0]
			extName = arr[1]
		}

		//替换Module TagName 变为真是的tagName
		if j.pkgMap[tagName] != "" {
			tagName = j.pkgMap[tagName]
			p.SetTagName(tagName)
		}

		if extName != "" && j.pkgMap[extName] != "" {
			extName = j.pkgMap[extName]
			p.SetTagName(tagName + ":" + extName)
		}
		extName = ""
		j.packageHTML(p.Child())

	}
}

/**
 * 对Module内部的innerHTML 做提前本域名下id绑定
 * @param html
 */
func (j *JUS) domainHTML(child []*HTML) {
	tagName := ""
	for _, p := range child {
		if p.tagType == -1 {
			tagName = "\b"
		} else {
			tagName = strings.ToLower(p.TagName())
		}

		if "@override" == tagName {
			continue
		}

		if "script" == tagName {
			j.scriptBuffer += ListToHTMLString(p.Child())
			p.Remove()
			continue
		}

		if "style" == tagName {
			j.styleBuffer += ListToHTMLString(p.Child())
			p.Remove()
			continue
		}

		if tagName != "" && !("\b" == tagName) {
			if p.GetAttr("domain") == "" {
				p.SetAttr("domain", j.domain)
			}
		}
		j.domainHTML(p.Child())
	}
}

/**
 * include code
 * @param html
 * @throws IOException
 */
func (j *JUS) includeCode(h []*HTML) {
	for _, p := range h {
		if p.TagName() == "@include" {
			p.ReplaceWithFormString(GetCode(j.root + "/" + p.GetAttr("value")))
		}
		j.includeCode(p.Child())
	}
}

/**
 * 判断文件是否存在
 */
func Exist(fileName string) bool {
	_, err := os.Stat(fileName)
	return err == nil || os.IsExist(err)
}

func (j *JUS) GetPackageMap() map[string]string {
	return nil
}

/**
 * 获取HTML定义的ID内容
 * @param name
 * @return
 */
func (j *JUS) GetDefine(name string) *HTMLObject {
	if name[0] == '$' && len(name) > 1 {
		name = string([]rune(name)[1:])
		if j.idMap[name] == nil {
			return &HTMLObject{Name: j.domain + name, HTMLObjectType: 0}
		}
	}
	return j.idMap[name]
}

/**
 * 替换所有@res:变量
 * @param value
 * @return
 */
func (j *JUS) scanMedia(value string) string {
	data := []rune(value)
	sb := ""
	tmp := make([]rune, 0)
	position := 0
	k := 0
	var ch rune
	keys := [...]rune{'@', 'r', 'e', 's', '('}
	xl := 0
	for position < len(data) {
		ch = data[position]
		position++
		if ch == keys[k] {
			k++
			if k == len(keys) {
				k = 0
				xl = 1
				for position < len(data) {
					ch = data[position]
					position++
					if ch == '(' {
						xl++
					} else if ch == ')' {
						xl--
					}
					if xl == 0 {
						break
					}
					if xl == 1 && ch == '(' {
						continue
					}

					tmp = append(tmp, ch)
				}

				path, err := filepath.Abs(j.htmlPath)
				if err != nil {
					//fmt.Println(path, err)
				}
				f := Substring(path, 0, LastIndex(path, ".")) + ".res/" + Substring(string(tmp), 1, len(tmp)-1)
				//fmt.Println(filepath.Abs(f))
				if Exist(f) {
					data, _ := GetBytes(f)
					sb += "data:image/png;base64," + base64.StdEncoding.EncodeToString(data)
				}

				tmp = tmp[0:0]
			}
			continue
		} else {
			if k > 0 {
				for i := 0; i < k; i++ {
					sb += string(keys[i])
				}
			}
			sb += string(ch)
			k = 0
		}
	}
	return sb
}

/**
 * 添加静态函数表达式
 * @param className
 * @param func
 */
func (j *JUS) AddStaticCode(className string, funcName string, value string) {
	j.staticCode = j.GetStaticCodeMap()
	var jus []*Attr = j.staticCode[className]
	if jus == nil {
		j.staticCode[className] = make([]*Attr, 0)
		jus = j.staticCode[className]
	}

	attr := &Attr{Name: funcName, Value: value}
	for _, v := range jus {
		if v.Name == funcName {
			return
		}
	}
	jus = append(jus, attr)
}

/**
 * 获取ClassPath 位置路径
 */
func (j *JUS) GetRootRealPath() string {
	return ""
}

/**
 * 判断事否为纯Script文件
 * @return
 */
func (j *JUS) IsScript() bool {
	return j.scriptFile
}

/**
 * 初始化Attr里的@this
 * @param html
 */
func (j *JUS) initObj(html *HTML) {
	for _, p := range html.Child() {
		for _, attr := range p.Attrs() {
			if "id" == strings.ToLower(attr.Name) {
				continue
			}
			p.SetAttr(attr.Name, ScriptInitD(strings.Replace(p.GetAttr(attr.Name), "@this", "__MODULE_METHOD__."+j.domain, -1), j.domain))
		}
		j.initObj(p)
	}
}

func (j *JUS) testHTML() *HTML {
	return j.html
}

func (j *JUS) ReadHTML() *HTML {
	if j.scriptFile {
		scriptObj := &Script{}
		scriptObj.CreateFrom(j, j.root, j.domain, IfStr(j.innerContent == "", j.paramValue, j.innerContent), IfStr(j.extendsScriptBuffer == "", "", j.extendsScriptBuffer))
		return (&HTML{value: scriptObj.ReadFromString(j.scanMedia(GetCode(j.jsPath)))}).Create()
	}
	j.noteHTML()
	j.importHTML()
	j.includeCode([]*HTML{j.html})
	htmls := j.html.GetUnTextChild()
	if len(htmls) == 1 {
		j.html = htmls[0]
	}

	j.overHTML(j.innerContent)
	j.packageHTML([]*HTML{j.html})
	j.domainHTML([]*HTML{j.html})
	if len(j.styleBuffer) > 0 {
		j.css = &CSS{jus: j}
		j.css.ReadFromString(j.styleBuffer)
	}

	j.html.SetAttr("isComponent", "true")
	j.html.SetAttr("id", j.domain)
	j.html.SetAttr("isroot", "true")

	j.initObj(j.html)
	j.scanHTML([]*HTML{j.html})
	j.componentId([]*HTML{j.html})

	if j.html.GetAttr("class") == "" || Index(j.html.GetAttr("class"), j.domain) == -1 {
		j.html.SetAttr("class", j.domain+IfStr(j.html.GetAttr("class") != "", " "+j.html.GetAttr("class"), " "))
	}

	if j.css != nil {
		style := &HTML{}
		style.ReadFromString("<style>" + j.styleFormat(j.styleBuffer) + "</style>")
		j.html.Append(style)
	}

	script := &HTMLScript{}
	script.CreateFrom(j, j.root, j.domain, IfStr(j.innerContent == "", j.paramValue, j.innerContent), j.extendsScriptBuffer)
	scriptCode := script.ReadFromString(j.scriptBuffer)
	if !j.extendFlag {
		j.html.InsertFromString("<script>__MODULE_METHOD__['"+j.domain+"'] = {};__MODULE_INIT__['"+j.domain+"'] = {};</script>", 0)
	}

	if len(scriptCode) != 0 {
		scriptHTML := &HTML{}
		scriptHTML.ReadFromString("<script>" + scriptCode + "</script>")
		j.html.Append(scriptHTML)
	}

	if Exist(j.jsPath) {
		script = &HTMLScript{}
		script.CreateFrom(j, j.root, j.domain, IfStr(j.innerContent == "", j.paramValue, j.innerContent), j.extendsScriptBuffer)
		scriptCode = script.ReadFromString(j.scanMedia(GetCode(j.jsPath)))

		if len(scriptCode) != 0 {
			scriptHTML := &HTML{}
			scriptHTML.ReadFromString("<script>" + scriptCode + "</script>")
			j.html.Append(scriptHTML)
		}
	}

	//最终加入静态函数变量

	if j.parent == nil {

		sb := ""

		j.staticCode = j.GetStaticCodeMap()
		for name, value := range j.staticCode {
			for _, attr := range value {
				sb += "__POS_VALUE__" + attr.Value + ";\r\n"
				sb += "__ADD_STATIC_METHOD__('" + name + "','" + attr.Name + "',__POS_VALUE__" + ",\f);\r\n"
				sb += "__WINDOW__[\f]['" + name + "'].__STATIC__();\r\n"
			}
		}

		j.staticScript = j.GetStaticMap()

		for name, value := range j.staticScript {
			for _, attr := range value {
				sb += "__POS_VALUE__" + attr.Value + ";\r\n"
				sb += "__ADD_STATIC_METHOD__('" + name + "','" + attr.Name + "',__POS_VALUE__" + ",\f);\r\n"
			}
		}
		if sb != "" {
			scriptHTML := &HTML{}
			scriptHTML.ReadFromString("<script>" + sb + "</script>")
			j.html.Insert(scriptHTML, 0)
		}

	}

	return j.testHTML()
}
