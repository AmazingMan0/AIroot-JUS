package util

import (
	"encoding/base64"
	"fmt"

	"io/ioutil"
	. "jus"
	. "jus/str"
	. "jus/tool"
	"os"
	"path/filepath"
	"strings"
)

//-------------------------------HTMLObject-------------------------------------
type HTMLObject struct {
	Name           string
	HTMLObjectType int
}

//----------------------------------JUS-----------------------------------------
type JUS struct {
	htmlPath            string //html模块的绝对路径
	jsPath              string //js模块的绝对路径
	cssPath             string //css模块路径
	SYSTEM_PATH         string //系统路径
	CLASS_PATH          string
	root                string
	parent              *JUS
	domain              string
	className           string
	innerContent        []*HTML
	paramValue          *Attr
	innerValue          string //内部代码转string
	html                *HTML
	extendsScriptBuffer string
	scriptBuffer        string
	styleBuffer         string
	cssBuffer           string
	pkgMap              map[string]string
	idMap               map[string]*HTMLObject
	staticScript        map[string][]*Attr
	staticCode          map[string][]*Attr
	styleCode           map[string]string
	extendFlag          bool
	style               *CSS
	css                 *CSS
	cssTag              map[string]string
	scriptFile          bool              //判断是否为独立JavaScript文件
	componentParam      []*Attr           //控件初始化参数
	componentCode       []*Attr           //控件默认代码
	scriptElement       map[string]string //需要导入的头文件，类似与import

}

/**
 * @param root			编译工程目录
 * @param domain		文件作用域
 * @param value			传递的实际参数
 * @param file			读取文件路径
 * @throws IOException
 */
func (j *JUS) CreateFromString(root string, domain string, innerContent []*HTML, code string, className string) bool {
	j.pkgMap = make(map[string]string)
	j.idMap = make(map[string]*HTMLObject)
	j.scriptElement = make(map[string]string)
	j.root = root
	if code == "" {
		return false
	}
	j.html = &HTML{}
	j.html.ReadFromString(j.scanMedia(code))
	if domain == "" {
		j.domain = "\b"
	} else {
		j.domain = domain
	}

	j.className = className
	j.innerContent = innerContent
	return true
}

/**
 * @param root			编译工程目录
 * @param domain		文件作用域
 * @param value			传递的实际参数
 * @param file			读取文件路径
 * @throws IOException
 */
func (j *JUS) CreateFrom(root string, domain string, innerContent []*HTML, className string) bool {
	j.pkgMap = make(map[string]string)
	j.idMap = make(map[string]*HTMLObject)
	j.scriptElement = make(map[string]string)
	j.root = root
	j.className = className
	j.innerContent = innerContent
	if className == "" {
		return false
	}
	file := strings.Replace(className, ".", "/", -1)

	if root == "" {
		j.htmlPath = file + ".html"
		j.jsPath = file + ".js"
		j.cssPath = file + ".css"
	} else {
		if file[0] == '$' {
			j.htmlPath = j.CLASS_PATH + "/" + file[1:] + ".html"
			j.jsPath = j.CLASS_PATH + "/" + file[1:] + ".js"
			j.cssPath = j.CLASS_PATH + "/" + file[1:] + ".css"
		} else {
			j.htmlPath = root + "/" + file + ".html"
			j.jsPath = root + "/" + file + ".js"
			j.cssPath = root + "/" + file + ".css"
			if !Exist(j.htmlPath) && !Exist(j.jsPath) && !Exist(j.cssPath) {
				j.htmlPath = j.CLASS_PATH + "/" + file + ".html"
				j.jsPath = j.CLASS_PATH + "/" + file + ".js"
				j.cssPath = j.CLASS_PATH + "/" + file + ".css"
			}
			//fmt.Println(j.htmlPath, j.jsPath)
		}

	}
	if Exist(j.htmlPath) {
		j.html = &HTML{}
		t, err := GetCode(j.htmlPath)
		if err != nil {
			return false
		}
		j.html.ReadFromString(j.scanMedia(t))
	} else if Exist(j.jsPath) {
		j.GetScriptElementMap()[className] = className
		j.scriptFile = true
	} else {
		return false

	}

	if domain == "" {
		j.domain = "\b"
	} else {
		j.domain = domain
	}

	return true
}

/**
 * 获取初始化导入的数据，html，js文件
 */
func (j *JUS) GetInitString() (string, bool) {
	if Exist(j.htmlPath) {
		t, err := GetCode(j.htmlPath)
		if err != nil {
			return "", false
		}
		return t, true
	} else if Exist(j.jsPath) {
		t, err := GetCode(j.jsPath)
		if err != nil {
			return "", false
		}
		return t, true
	} else {
		return "", false

	}
}

/**
 *
 * @param root
 * @param domain
 * @param value
 * @param className
 * @param parent
 * @throws IOException
 */
func (j *JUS) CreateFromParent(root string, domain string, value []*HTML, className string, parent *JUS) bool {
	j.parent = parent
	return j.CreateFrom(root, domain, value, className)

}

func (j *JUS) SetConstructor(value *Attr) *JUS {
	j.paramValue = value
	return j
}

func (j *JUS) SetValue(value string) {
	j.innerValue = value
}

func (j *JUS) GetDomain() string {
	return j.domain
}

func (j *JUS) GetStaticMap() map[string][]*Attr {
	if j.parent != nil {
		return j.parent.GetStaticMap()
	}

	if j.staticScript == nil {
		j.staticScript = make(map[string][]*Attr)
	}
	return j.staticScript
}

/**
 * 获取HTML标签是Script类型的（注意Script类型不是 <script/>标签
 */
func (j *JUS) GetScriptElementMap() map[string]string {
	if j.parent != nil {
		return j.parent.GetScriptElementMap()
	}
	if j.scriptElement == nil {
		j.scriptElement = make(map[string]string)
	}
	return j.scriptElement
}

func (j *JUS) GetConstructorCode() *[]*Attr {
	if j.parent != nil {
		return j.parent.GetConstructorCode()
	}
	return &(j.componentCode)
}

func (j *JUS) GetStaticCodeMap() map[string][]*Attr {
	if j.parent != nil {
		return j.parent.GetStaticCodeMap()
	}
	if j.staticCode == nil {
		j.staticCode = make(map[string][]*Attr)
	}
	return j.staticCode
}

func (j *JUS) GetStyleCodeMap() map[string]string {
	if j.parent != nil {
		return j.parent.GetStyleCodeMap()
	}
	if j.styleCode == nil {
		j.styleCode = make(map[string]string)
	}
	return j.styleCode
}

/**
 * 添加静态函数表达式
 * @param className
 * @param func
 */
func (j *JUS) AddStaticScript(className string, funcName string, value string) {
	j.staticScript = j.GetStaticMap()
	fun := j.staticScript[className]
	if fun == nil {
		fun = make([]*Attr, 0)
	}
	attr := &Attr{Name: funcName, Value: value}
	for _, a := range fun {
		if a.Name == funcName {
			return
		}
	}
	fun = append(fun, attr)
	j.staticScript[className] = fun
}

/**
 * 添加静态函数表达式
 * @param className
 * @param func
 */
func (j *JUS) AddStaticCode(className string, funcName string, value string) {
	j.staticCode = j.GetStaticCodeMap()
	fun := j.staticCode[className]
	if fun == nil {
		fun = make([]*Attr, 0)
	}
	attr := &Attr{Name: funcName, Value: value}
	for _, a := range fun {
		if a.Name == funcName {
			return
		}
	}
	fun = append(fun, attr)
	j.staticCode[className] = fun
}

func (j *JUS) AddStyleCode(className string, value string) {
	j.styleCode = j.GetStyleCodeMap()
	fun := j.styleCode[className]
	if fun == "" {
		j.styleCode[className] = value
	}

}

func (j *JUS) overHTML(node []*HTML) {
	child := &HTML{}
	child.InsertList(node, 0)
	overList := child.Filter("@override")
	var lst []*HTML = nil
	var t *HTML = nil
	var p *HTML = nil

	//Override
	if len(overList) != 0 {
		for k := 0; k < len(overList); k++ {
			lst = overList[k].Child()
			for i := 0; i < len(lst); i++ {
				p = lst[i]
				if "script" == p.TagName() {
					j.extendsScriptBuffer += ListToHTMLString(p.Child())
					continue
				}
				t = j.html.GetElementById(p.GetAttr("id"))
				if t != nil {
					t.ReplaceWith(p)

				}
			}
		}
	}

	child.RemoveChildByTagName("@override")
	//@uncare 表示让编译器不关系此内部代码，也就是说编译器不编译此内部代码
	overList = child.Filter("@uncare")
	child.RemoveChildByTagName("@uncare")

	//----开始替换----
	pList := j.html.GetElementsByTagName("@content")
	if len(pList) > 0 {
		var t []*HTML = nil
		for _, h := range pList {
			if child.IsEmpty() { //文字
				t = h.Child()
			} else {
				t = child.Child()
			}
			for _, v := range t {
				if v.tag != "" {
					v.SetAttr("____CONTENT____", h.GetAttr("to")) //如果@content有to表示把这条数据添加到变量里
				}
			}
			h.ReplaceWithFormList(t)
		}
	}

	pList = j.html.GetElementsByTagName("@value")
	if len(pList) > 0 {
		if j.innerValue == "" {
			if child.IsEmpty() { //文字
				j.innerValue = ListToHTMLString(pList[0].Child())
			} else {
				j.innerValue = ListToHTMLString(child.Child())
			}

		}

		for _, h := range pList {
			h.Remove()
		}
	}

} //overHTML

func (j *JUS) clearMark(child []*HTML) []*HTML {
	var p *HTML = nil
	for i := 0; i < len(child); i++ {
		p = child[i]
		p.RemoveAttr("domain")
		p.RemoveAttr("____format____")
		j.clearMark(p.Child())
	}
	return child
}

func (j *JUS) scanHTML(child []*HTML) {
	tagName := ""
	arr := make([]string, 0)
	var tHTML *HTML = nil
	for _, p := range child {
		tagName = p.TagName()
		if "@uncare" == p.TagName() {
			p.ReplaceWithFormList(p.Child())
			continue
		}
		if "module" == p.TagName() {
			tagName = "core.module"
		}

		if p.GetAttr("isroot") != "" {
			p.SetAttr("id", j.domain)
		} else {
			if p.GetAttr("id") == "" {
				p.SetAttr("id", p.GetAttr("domain")+getName())
			} else {

				if p.GetAttr("id")[0] == '$' {
					p.SetAttr("src_id", p.GetAttr("id")[1:])
					p.SetAttr("id", p.GetAttr("domain")+p.GetAttr("id")[1:])
				} else {
					p.SetAttr("src_id", p.GetAttr("id"))
					p.SetAttr("id", p.GetAttr("domain")+p.GetAttr("id"))
				}
			}
		}
		if p.GetAttr("____CONTENT____") != "" {
			j.scriptBuffer += "____." + p.GetAttr("____CONTENT____") + ".push(" + p.GetAttr("id") + ");\r\n"
		}
		if Index(tagName, ".") != -1 {
			arr = strings.Split(tagName, ":")
			if len(arr) > 1 {
				tagName = arr[1]
			}
			var tFunc *JUS = &JUS{SYSTEM_PATH: j.SYSTEM_PATH, CLASS_PATH: j.CLASS_PATH}

			if tFunc.CreateFromParent(j.root, p.GetAttr("id"), p.Child(), tagName, j) {

				if tFunc.IsScript() {
					tFunc.SetConstructor(&Attr{tagName, p.GetConstructerParameter()}).setExtend(p.GetAttr("id") == j.domain)
					if p.GetConstructerCode() != "" {
						j.idMap[p.GetAttr("src_id")] = &HTMLObject{Name: p.GetAttr("id"), HTMLObjectType: 1}
						//j.componentCode = append(j.componentCode, &Attr{p.GetAttr("id"), p.GetConstructerCode()})

					}
					tHTML = tFunc.ReadHTML()
				} else {
					if p.GetConstructerParameter() != "" {
						j.componentParam = append(j.componentParam, &Attr{p.GetAttr("id"), p.GetConstructerParameter()})
					}
					if p.GetConstructerCode() != "" {
						j.componentCode = append(j.componentCode, &Attr{p.GetAttr("id"), p.GetConstructerCode()})
					}
					tFunc.SetConstructor(&Attr{tagName, p.GetConstructerParameter()}).setExtend(p.GetAttr("id") == j.domain)
					tHTML = tFunc.ReadHTML()
					tHTML.CopyFrom(p)
					if len(arr) > 1 {
						tHTML.SetTagName(arr[0])
					}
				}
			} else {
				tHTML = (&HTML{}).ReadFromString("<div style='font-size:14px;font-weight:bold;background-color: #E91E63;color: #fefefe;padding: 5px;border-radius: 5px;display: inline;'>" + tagName + " isn't exist.</div>")
			}
			if p == j.html {
				j.html = tHTML
			} else {
				p.ReplaceWith(tHTML)
			}
			continue
		}
		j.scanHTML(p.Child())
	}
}

/**
 * 设置扩展
 * @param flag
 * @return
 */
func (j *JUS) setExtend(flag bool) *JUS {
	j.extendFlag = flag
	return j
}

/**
 * 对所有控件的ID进行记录
 * @param html
 */
func (j *JUS) componentId(child []*HTML) {
	for _, p := range child {
		if p.GetAttr("domain") != "" && p.GetAttr("domain") == j.domain {
			if p.GetAttr("class_id") != "" {
				j.idMap[p.GetAttr("src_id")] = &HTMLObject{Name: p.GetAttr("id"), HTMLObjectType: 1}
			} else {
				j.idMap[p.GetAttr("src_id")] = &HTMLObject{Name: p.GetAttr("id"), HTMLObjectType: 0}
			}
		}

		j.componentId(p.Child())
	}

}

func (j *JUS) cssComponent(child []*HTML) {
	var tagName string
	c := 0
	for _, p := range child {
		if p.GetAttr("domain") != "" && p.GetAttr("domain") == j.domain {
			tagName = p.GetAttr("class_id")
			if tagName != "" {
				c = LastIndex(tagName, ".")
				if c != -1 {
					tagName = Substring(tagName, c+1, len(tagName))
				}
				tmp := ""
				if j.cssTag[strings.ToLower(tagName)] != "" {
					tmp = " " + j.cssTag[strings.ToLower(tagName)]
				}

				p.SetAttr("class", p.GetAttr("class")+tmp)

			}
		}

		j.cssComponent(p.Child())
	}

}

func (j *JUS) styleFormat() string {
	j.style.AddDomain("." + j.domain)
	j.style.ReplaceSelecter("body", "."+j.domain)
	j.cssTag = j.style.GetComponentClass()
	j.cssComponent([]*HTML{j.html})
	return ScriptInitD(j.style.ToString(), j.domain)

}

/**
 * 公共css属性，也可以认为某个控件的全局css样式
 */
func (j *JUS) cssFormat() string {
	j.css.AddDomain("[class_id='" + j.className + "']")
	j.css.ReplaceSelecter("body", "[class_id='"+j.className+"']")
	return ScriptInitD(j.css.ToString(), j.domain)

}

func (j *JUS) importHTML() {
	sets := j.html.GetElementsByTagName("@import")

	attrsMap := make(map[string]string)
	attrsMap["value"] = ""
	html := &HTML{tagData: attrsMap}
	sets = append(sets, html)

	p := 0
	value := ""
	path := ""
	fileName := ""

	for i := 0; i < len(sets); i++ {
		value = sets[i].GetAttr("value")
		value = strings.Replace(value, ";", "", -1)
		value = strings.Replace(value, " ", "", -1)
		p = LastIndex(value, ".")
		if p != -1 {
			path = Substring(value, 0, p)
			if CharAt(value, p+1) != "*" {
				fileName = Substring(value, p+1, -1) + ".html"
			}
		}

		fl := j.CLASS_PATH + "/" + strings.Replace(path, ".", "/", -1)

		lst, err := ioutil.ReadDir(fl)
		if err == nil {
			for _, f := range lst {
				if !f.IsDir() && (fileName == "" || fileName == f.Name()) {
					j.pkgMap[strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), ".")))] = path + "." + Substring(f.Name(), 0, LastIndex(f.Name(), "."))
					//fmt.Println(strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), "."))), path+"."+Substring(f.Name(), 0, LastIndex(f.Name(), ".")))
				}
			}
		}
		fl = j.root + "/" + strings.Replace(path, ".", "/", -1)

		lst, err = ioutil.ReadDir(fl)
		if err == nil {
			for _, f := range lst {
				if !f.IsDir() && (fileName == "" || fileName == f.Name()) {
					j.pkgMap[strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), ".")))] = path + "." + Substring(f.Name(), 0, LastIndex(f.Name(), "."))
					//fmt.Println(strings.ToLower(Substring(f.Name(), 0, LastIndex(f.Name(), "."))), path+"."+Substring(f.Name(), 0, LastIndex(f.Name(), ".")))
				}
			}
		}

		path = ""
		fileName = ""

	}
	j.html.RemoveChildByTagName("@import")

}

/**
 * 获取注释信息
 */
func (j *JUS) noteHTML() {
	child := j.html.Filter("!")
	for _, v := range child {
		v.Remove()
	}
}

/**
 *
 */
func (j *JUS) packageHTML(child []*HTML) {
	tagName := ""
	extName := ""
	var arr []string
	for _, p := range child {
		tagName = strings.ToLower(p.TagName())
		arr = strings.Split(tagName, ":")
		if len(arr) > 1 {
			tagName = arr[0]
			extName = arr[1]
		}

		//替换Module TagName 变为真是的tagName
		if j.pkgMap[tagName] != "" {
			tagName = j.pkgMap[tagName]
			p.SetTagName(tagName)
		}

		if extName != "" && j.pkgMap[extName] != "" {
			extName = j.pkgMap[extName]
			p.SetTagName(tagName + ":" + extName)
		}
		extName = ""
		j.packageHTML(p.Child())

	}
}

/**
 * 对Module内部的innerHTML 做提前本域名下id绑定
 * @param html
 */
func (j *JUS) domainHTML(child []*HTML) {
	tagName := ""
	for _, p := range child {
		if p.tagType == -1 {
			tagName = "\b"
		} else {
			tagName = strings.ToLower(p.TagName())
		}

		if "@override" == tagName {
			continue
		}

		if "@uncare" == tagName {
			continue
		}

		if "script" == tagName || "~script" == tagName {
			j.scriptBuffer += ListToHTMLString(p.Child())
			p.Remove()
			continue
		}

		if p.GetConstructerCode() != "" {

		}

		if "style" == tagName {
			j.styleBuffer += ListToHTMLString(p.Child())
			p.Remove()
			continue
		}

		if "css" == tagName {
			j.cssBuffer += ListToHTMLString(p.Child())
			p.Remove()
			continue
		}

		if tagName != "" && !("\b" == tagName) {
			if p.GetAttr("domain") == "" {
				p.SetAttr("domain", j.domain)
			}
		}
		j.domainHTML(p.Child())
	}
}

/**
 * include code
 * @param html
 * @throws IOException
 */
func (j *JUS) includeCode(h []*HTML) {
	for _, p := range h {
		if p.TagName() == "@include" {
			tpr, err := GetCode(j.root + "/" + p.GetAttr("value"))
			if err != nil {
				fmt.Println(j.root + "/" + p.GetAttr("value") + " isn't Exists.")
			}
			p.ReplaceWithFormString(tpr)
		}
		j.includeCode(p.Child())
	}
}

/**
 * 判断文件是否存在
 */
func Exist(fileName string) bool {
	_, err := os.Stat(fileName)
	return err == nil || os.IsExist(err)
}

func (j *JUS) GetPackageMap() map[string]string {
	return j.pkgMap
}

/**
 * 获取HTML定义的ID内容
 * @param name
 * @return
 */
func (j *JUS) GetDefine(name string) *HTMLObject {
	if name[0] == '$' && len(name) > 1 {
		name = string([]rune(name)[1:])
		if j.idMap[name] == nil {
			return &HTMLObject{Name: j.domain + name, HTMLObjectType: 0}
		}
	}
	return j.idMap[name]
}

/**
 * 替换所有@res:变量
 * @param value
 * @return
 */
func (j *JUS) scanMedia(value string) string {
	data := []rune(value)
	sb := ""
	tmp := make([]rune, 0)
	position := 0
	k := 0
	var ch rune
	keys := [...]rune{'@', 'r', 'e', 's', '('}
	xl := 0
	for position < len(data) {
		ch = data[position]
		position++
		if ch == keys[k] {
			k++
			if k == len(keys) {
				k = 0
				xl = 1
				for position < len(data) {
					ch = data[position]
					position++
					if ch == '(' {
						xl++
					} else if ch == ')' {
						xl--
					}
					if xl == 0 {
						break
					}
					if xl == 1 && ch == '(' {
						continue
					}

					tmp = append(tmp, ch)
				}

				path, err := filepath.Abs(j.htmlPath)
				if err != nil {
					//fmt.Println(path, err)
				}
				f := Substring(path, 0, LastIndex(path, ".")) + ".res/" + Substring(string(tmp), 1, len(tmp)-1)
				//fmt.Println(filepath.Abs(f))
				if Exist(f) {
					data, _ := GetBytes(f)
					sb += "data:image/png;base64," + base64.StdEncoding.EncodeToString(data)
				}

				tmp = tmp[0:0]
			}
			continue
		} else {
			if k > 0 {
				for i := 0; i < k; i++ {
					sb += string(keys[i])
				}
			}
			sb += string(ch)
			k = 0
		}
	}
	return sb
}

/**
 * 获取ClassPath 位置路径
 */
func (j *JUS) GetRootRealPath() string {
	return ""
}

/**
 * 判断事否为纯Script文件
 * @return
 */
func (j *JUS) IsScript() bool {
	return j.scriptFile
}

/**
 * 初始化Attr里的@this
 * @param html
 */
func (j *JUS) initObj(html *HTML) {
	for _, p := range html.Child() {
		for _, attr := range p.Attrs() {
			if "id" == strings.ToLower(attr.Name) {
				continue
			}
			p.SetAttr(attr.Name, ScriptInitD(strings.Replace(p.GetAttr(attr.Name), "@this", j.domain, -1), j.domain))
		}
		j.initObj(p)
	}
}

func (j *JUS) testHTML() *HTML {
	return j.html
}

func (j *JUS) ReadHTML() *HTML {
	if j.scriptFile {
		tHTML := &HTML{}
		tps := ""
		if j.paramValue != nil && j.paramValue.Value != "" {
			tps = "," + j.paramValue.Value
		}
		tst := ""
		for _, v := range j.innerContent {
			for _, v2 := range v.Child() {
				if v2.IsText() {
					if strings.TrimSpace(v2.Text()) != "" {
						tst += j.domain + "." + v.TagName() + "=\"" + Escape(v2.Text()) + "\";\r\n"
					}
				} else {
					if v2.GetAttr("id") == "" {
						v2.SetAttr("id", v2.GetAttr("domain")+getName())
					} else {

						if v2.GetAttr("id")[0] == '$' {
							v2.SetAttr("src_id", v2.GetAttr("id")[1:])
							v2.SetAttr("id", v2.GetAttr("domain")+v2.GetAttr("id")[1:])
						} else {
							v2.SetAttr("src_id", v2.GetAttr("id"))
							v2.SetAttr("id", v2.GetAttr("domain")+v2.GetAttr("id"))
						}
					}
					var tFunc *JUS = &JUS{SYSTEM_PATH: j.SYSTEM_PATH, CLASS_PATH: j.CLASS_PATH}
					j.idMap[v2.GetAttr("src_id")] = &HTMLObject{Name: v2.GetAttr("id"), HTMLObjectType: 1}
					if tFunc.CreateFromParent(j.root, v2.GetAttr("id"), v2.Child(), v2.TagName(), j) {
						if tFunc.IsScript() {
							tFunc.SetConstructor(&Attr{v2.TagName(), v2.GetConstructerParameter()}).setExtend(v2.GetAttr("id") == j.domain)
							if v2.GetConstructerCode() != "" {
								var arr *[]*Attr = j.GetConstructorCode()
								*arr = append(*arr, &Attr{v2.GetAttr("id"), v2.GetConstructerCode()})
								//j.componentCode = append(j.componentCode, &Attr{v2.GetAttr("id"), v2.GetConstructerCode()})
							}
							tst = tFunc.ReadHTML().Text() + "\r\n" + tst
						} else {
							//如果是HTML文件
							htps := ""
							if v2.GetConstructerParameter() != "" {
								htps = "," + v2.GetConstructerParameter()
							}
							if v2.GetConstructerCode() != "" {
								fmt.Println("@", v2.GetConstructerCode())
								//j.componentCode = append(j.componentCode, &Attr{v2.GetAttr("id"), v2.GetConstructerCode()})
								var arr *[]*Attr = j.GetConstructorCode()
								*arr = append(*arr, &Attr{v2.GetAttr("id"), v2.GetConstructerCode()})
							}

							j.GetScriptElementMap()[v2.TagName()] = v2.TagName()
							tst = "var " + v2.GetAttr("id") + " = getModule(\"" + v2.TagName() + "\",\f" + htps + ");\r\n" + tst
						}
					}
					tst += j.domain + "." + v.TagName() + "=" + v2.GetAttr("id") + ";\r\n"
				}
			}
		}
		tHTML.ReadFromString("<script> var " + j.domain + " = getModule(\"" + j.className + "\",\f" + tps + ");\r\n" + tst + "</script>")
		return tHTML
	}

	j.noteHTML()
	j.importHTML()
	j.includeCode([]*HTML{j.html})
	htmls := j.html.GetUnTextChild()
	if len(htmls) == 1 {
		j.html = htmls[0]
	}
	//加载外部CSS
	if Exist(j.cssPath) {
		css := &HTML{}
		tpr, _ := GetCode(j.cssPath)
		css.ReadFromString("<style>" + tpr + "</style>")
		j.html.Append(css)
	}

	j.overHTML(j.innerContent)
	j.packageHTML([]*HTML{j.html})
	j.domainHTML([]*HTML{j.html})
	if len(j.styleBuffer) > 0 {
		j.style = &CSS{jus: j}
		j.style.ReadFromString(j.styleBuffer)
	}

	j.html.SetAttr("isComponent", "true")
	j.html.SetAttr("id", j.domain)
	j.html.SetAttr("isroot", "true")

	j.initObj(j.html)
	j.scanHTML([]*HTML{j.html})
	j.componentId([]*HTML{j.html})

	if j.html.GetAttr("class") == "" || Index(j.html.GetAttr("class"), j.domain) == -1 {
		j.html.SetAttr("class", j.domain+IfStr(j.html.GetAttr("class") != "", " "+j.html.GetAttr("class"), " "))
	}

	if j.style != nil {
		style := &HTML{}
		style.ReadFromString("<style>" + j.styleFormat() + "</style>")
		j.html.Append(style)
	}

	//是否有本地ScriptCode
	if !j.extendFlag {
		j.html.InsertFromString("<script>__MODULE_INIT__['"+j.domain+"'] = {};</script>", 0)
	}
	//本类是否有参数
	if len(j.componentParam) > 0 {
		scriptHTML := &HTML{}
		var tmp = ""
		for _, v := range j.componentParam {
			tmp += "_MODULE_CONTENT_LIST_ATTR_['" + v.Name + "'] = [" + v.Value + "];\r\n"
		}
		scriptHTML.ReadFromString("<script>" + tmp + "</script>")
		j.html.Append(scriptHTML)
	}
	script := &HTMLScript{}
	script.CreateFrom(j, j.root, j.domain, j.paramValue, j.innerValue, j.extendsScriptBuffer)
	scriptCode := script.ReadFromString(j.scriptBuffer)

	if len(scriptCode) != 0 {
		scriptHTML := &HTML{}
		scriptHTML.ReadFromString("<script>" + scriptCode + "</script>")
		j.html.Append(scriptHTML)
	}

	if len(j.componentCode) > 0 {
		ccode := "function init(){"
		for _, v := range j.componentCode {
			ccode += componentInitCode(v)
		}
		ccode += "}"
		scriptHTML := &HTML{}
		scriptHTML.ReadFromString("<script>" + script.ReadFromString(ccode) + "</script>")
		j.html.Append(scriptHTML)
	}

	if Exist(j.jsPath) {
		script = &HTMLScript{}
		script.CreateFrom(j, j.root, j.domain, j.paramValue, j.innerValue, j.extendsScriptBuffer)
		tpr, _ := GetCode(j.jsPath)
		scriptCode = script.ReadFromString(j.scanMedia(tpr))

		if len(scriptCode) != 0 {
			scriptHTML := &HTML{}
			scriptHTML.ReadFromString("<script>" + scriptCode + "</script>")
			j.html.Append(scriptHTML)
		}
	}

	//最终加入静态函数变量

	if j.parent == nil {

		sb := "_MODULE_CONTENT_LIST_[\f]={};\r\n"

		for _, v := range j.scriptElement {
			value := v
			ft := &JUS{SYSTEM_PATH: j.SYSTEM_PATH, CLASS_PATH: j.CLASS_PATH}
			ft.CreateFromParent(j.root, "", nil, strings.TrimSpace(value), j)

			if ft.IsScript() {
				scriptObj := &Script{}
				scriptObj.CreateFrom(j, j.root, j.domain, j.paramValue, j.extendsScriptBuffer)
				tpr, _ := ft.GetInitString()
				sb += "\t_MODULE_CONTENT_LIST_[\f]['" + strings.TrimSpace(value) + "'] = " + scriptObj.ReadFromString(j.scanMedia(tpr)) + ";\r\n"
			} else {
				sb += "\t_MODULE_CONTENT_LIST_[\f]['" + strings.TrimSpace(value) + "'] = \"" + Escape(ft.ReadHTML().ToString()) + "\";\r\n"
			}
		}

		j.staticCode = j.GetStaticCodeMap()
		for name, value := range j.staticCode {
			for _, attr := range value {
				sb += "__POS_VALUE__" + attr.Value + ";\r\n"
				sb += "__ADD_STATIC_METHOD__('" + name + "','" + attr.Name + "',__POS_VALUE__" + ",\f);\r\n"
				sb += "__WINDOW__[\f]['" + name + "'].__STATIC__();\r\n"
			}
		}

		j.staticScript = j.GetStaticMap()

		for name, value := range j.staticScript {
			for _, attr := range value {
				sb += "__POS_VALUE__" + attr.Value + ";\r\n"
				sb += "__ADD_STATIC_METHOD__('" + name + "','" + attr.Name + "',__POS_VALUE__" + ",\f);\r\n"
			}
		}
		if sb != "" {
			scriptHTML := &HTML{}
			scriptHTML.ReadFromString("<script>" + sb + "</script>")
			j.html.Insert(scriptHTML, 0)
		}

		sb = ""
		j.styleCode = j.GetStyleCodeMap()
		for _, value := range j.styleCode {
			sb += value
			sb += "\r\n"
		}

		if sb != "" {

			cssHTML := &HTML{}
			cssHTML.ReadFromString("<style ispub='true'>" + sb + "</style>")
			j.html.Insert(cssHTML, 0)
		}
	}
	j.html.SetAttr("class_id", j.className)
	if len(j.cssBuffer) > 0 {
		j.css = &CSS{jus: j}
		j.css.ReadFromString(j.cssBuffer)
		j.AddStyleCode(j.className, j.cssFormat())
	}
	return j.testHTML()
}

/**
 * 初始化空间默认代码
 */
func componentInitCode(value *Attr) string {
	ms := &MScript{}
	ms.ReadFromString(value.Value)
	sb := ""
	for _, v := range ms.GetJUIScriptData() {
		//fmt.Println(v.Value, v.Domain)
		if v.Value == "this" && v.Domain == "class" {
			v.Value = value.Name
		}
		sb += v.Value
	}
	return sb
}
